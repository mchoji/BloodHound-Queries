{
    "queries": [
        {
            "category": "Information",
            "name": "List all owned users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u {owned: True}) WHERE (u:User OR u:AZUser) OPTIONAL MATCH (d)-[r:Contains|AZContains*1..]->(u) WHERE (d:Domain OR d:AZTenant) RETURN d, u, r"
                }
            ]
        },
        {
            "category": "Information",
            "name": "List all owned computers/devices",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH r=(d)-[:Contains|AZContains*1..]->(m) WHERE (m:Computer OR m:AZDevice) AND m.owned=True RETURN r UNION MATCH (r) WHERE (r:Computer or r:AZDevice or r:AZVM) AND r.owned=True RETURN r"
                }
            ]
        },
        {
            "category": "Information",
            "name": "List all owned groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH r=(d)-[:Contains|AZContains*1..]->(m) WHERE (m:Group OR m:AZGroup) AND m.owned=True RETURN r UNION MATCH (r) WHERE (r:Group or r:AZGroup) AND r.owned=True RETURN r"
                }
            ]
        },
        {
            "category": "Information",
            "name": "List the groups of all owned users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m {owned: True}) WHERE (m:User OR m:AZUser) WITH m MATCH p=(m)-[:MemberOf*1..]->(n) WHERE (n:Group OR n:AZGroup) RETURN p"
                }
            ]
        },
        {
            "category": "Information",
            "name": "All Users with with Same Name in Different Domains",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u1:User),(u2:User) WHERE split(u1.name,'@')[0] = split(u2.name,'@')[0] AND u1.domain <> u2.domain AND tointeger(split(u1.objectid,'-')[7]) >= 1000 RETURN u1"
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find an object in one domain that can do something to a foreign object",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p"
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find all sessions a user in a specific domain has",
            "requireNodeSelect": true,
            "queryList": [
                {
                    "final": false,
                    "title": "Select source domain...",
                    "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
                },
                {
                    "final": true,
                    "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:$result}) RETURN p",
                    "startNode": "{}",
                    "allowCollapse": false
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find an object from domain 'A' that can do anything to a foreign object",
            "requireNodeSelect": true,
            "queryList": [
                {
                    "final": false,
                    "title": "Select source domain...",
                    "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
                },
                {
                    "final": true,
                    "query": "MATCH p=(n {domain:$result})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",
                    "startNode": "{}",
                    "allowCollapse": false
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find All edges any owned user has on a computer/device/vm/app",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((m {owned: True})-[r*]->(b)) WHERE (m:User OR m:AZUser) AND (b:Computer OR b:AZDevice OR b:AZVM OR b:AZAPP) RETURN p"
                }
            ]
        },
        {
            "category": "Information",
            "name": "All ACLs to Computers (excluding High Value Targets)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (ucg)-[r]->(c:Computer) WHERE (ucg:User OR ucg:Computer OR ucg:Group) AND ucg.highvalue = false AND r.isacl = true RETURN p"
                }
            ]
        },
        {
            "category": "Information",
            "name": "All Computers in Domain Admins",
            "queryList": [
                {
                    "final": false,
                    "title": "Select a Domain Admins group...",
                    "query": "MATCH (g:Group) WHERE g.objectid =~ $domain_admins_id RETURN g.name ORDER BY g.name ASC",
                    "props": {
                        "domain_admins_id": "S-1-5-.*-512"
                    }
                },
                {
                    "final": true,
                    "query": "MATCH p = (c:Computer)-[r:MemberOf|HasSIDHistory*1..]->(g:Group) WHERE g.name = $result RETURN p",
                    "endNode": "{}"
                }
            ]
        },
        {
            "category": "Information",
            "name": "All Owned Principals",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(o) WHERE o.owned = true RETURN p"
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find all active Domain Admin sessions",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p"
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find users that logged in within the last 90 days",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find users with passwords last set within the last 90 days",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
                }
            ]
        },
        {
            "category": "Information",
            "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE x =~ '(?i).*MSSQL.*') RETURN c"
                }
            ]
        },
        {
            "category": "Information",
            "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'JENKINS'",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE x =~ '(?i).*jenkins.*') RETURN c"
                }
            ]
        },
        {
            "category": "Information",
            "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'JIRA'",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE x =~ '(?i).*jira.*') RETURN c"
                }
            ]
        },
        {
            "category": "Information",
            "name": "View all GPOs",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (n:GPO) RETURN n"
                }
            ]
        },
        {
            "category": "Information",
            "name": "Find groups that contain both users and computers",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "All Computers without LAPS",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false RETURN p"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "All Users with Password in AD",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.userpassword IS NOT NULL RETURN p"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "All Users with 'PASS' in AD Description",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.description =~ '(?i).*pass.*' RETURN p"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "All Users with 'LOGIN' in AD Description",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.description =~ '(?i).*login.*' RETURN p"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "All Users with 'SENHA' in AD Description",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.description =~ '(?i).*senha.*' RETURN p"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "All Users with Password not Required",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.passwordnotreqd = true RETURN p"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "View all groups that contain the word 'ADM'",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (n) WHERE (n:Group OR n:AZGroup) AND (n.name =~ '(?i).*adm.*' OR n.azname =~ '(?i).*adm.*')  RETURN n"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "View all users that contain the word 'ADM'",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (n) WHERE (n:User OR n:AZUser) AND (n.name =~ '(?i).*adm.*' OR n.azname =~ '(?i).*adm.*')  RETURN n"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "View all users that contain the words 'SERVICE' or 'SVC'",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (n) WHERE (n:User OR n:AZUser) AND (n.name =~ '(?i).*(service|svc).*' OR n.azname =~ '(?i).*(service|svc).*')  RETURN n"
                }
            ]
        },
        {
            "category": "Interesting Information",
            "name": "View all users or groups that contain 'JENKINS' in their names",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m)-[:MemberOf*]->(g) WHERE g.name =~ '(?i).*jenkins.*' OR g.azname =~ '(?i).*jenkins.*' OR m.name =~ '(?i).*jenkins.*' OR m.azname =~ '(?i).*jenkins.*' RETURN p"
                }
            ]
        },
        {
            "category": "Obsolete",
            "name": "Find all computers with unsupported operating systems",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' RETURN H"
                }
            ]
        },
        {
            "category": "Obsolete",
            "name": "Find users that have never logged on and account is still active",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "Find the Shortest path to a high value target from an owned object",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths to Domain (including Computers)",
            "queryList": [
                {
                    "final": false,
                    "title": "Select a Domain...",
                    "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name ASC"
                },
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((uc)-[r:{}*1..]->(d:Domain {name: $result})) WHERE (uc:User OR uc:Computer) RETURN p",
                    "endNode": "{}"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths to no LAPS",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((uc)-[r:{}*1..]->(c:Computer)) WHERE (uc:User OR uc:Computer) AND NOT uc = c AND c.haslaps = false RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from Kerberoastable Users to Computers",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(c:Computer)) WHERE u.hasspn = true RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from Kerberoastable Users to High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(h)) WHERE u.hasspn = true AND h.highvalue = true RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from Owned Principals (including everything)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(a)) WHERE u.owned = true AND u <> a RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from Owned Principals to Domain",
            "queryList": [
                {
                    "final": false,
                    "title": "Select a Domain...",
                    "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name ASC"
                },
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(d:Domain)) WHERE o.owned = true AND d.name = $result RETURN p",
                    "endNode": "{}"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from Owned Principals to High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(h)) WHERE o.owned = true AND h.highvalue = true RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from Owned Principals to no LAPS",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(c:Computer)) WHERE NOT o = c AND o.owned = true AND c.haslaps = false RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from no Signing to Domain",
            "queryList": [
                {
                    "final": false,
                    "title": "Select a Domain...",
                    "query": "MATCH (d:Domain) RETURN d.name ORDER BY d.name ASC"
                },
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((c:Computer)-[r:{}*1..]->(d:Domain)) WHERE c.hassigning = false AND d.name = $result RETURN p",
                    "endNode": "{}"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from no Signing to High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((c:Computer)-[r:{}*1..]->(h)) WHERE NOT c = h AND c.hassigning = false AND h.highvalue = true RETURN p"
                }
            ]
        },
        {
            "category": "Shortest Paths",
            "name": "All Shortest Paths from Domain Users and Domain Computers (including everything)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = allShortestPaths((g:Group)-[r:{}*1..]->(a)) WHERE (g.objectid =~ $domain_users_id OR g.objectid =~ $domain_computers_id) AND g <> a RETURN p",
                    "props": {
                        "domain_users_id": "S-1-5-.*-513",
                        "domain_computers_id": "S-1-5-.*-515"
                    }
                }
            ]
        },
        {
            "category": "Dangerous Rights",
            "name": "Find groups that can reset passwords (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p"
                }
            ]
        },
        {
            "category": "Dangerous Rights",
            "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p"
                }
            ]
        },
        {
            "category": "Dangerous Rights",
            "name": "Find if unprivileged users have rights to add members into groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p"
                }
            ]
        },
        {
            "category": "RDP",
            "name": "Find machines Domain Users can RDP into",
            "queryList": [
                {
                    "final": true,
                    "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p"
                }
            ]
        },
        {
            "category": "RDP",
            "name": "Find what GROUPS can RDP",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p"
                }
            ]
        },
        {
            "category": "RDP",
            "name": "Find machines OWNED Users can RDP into",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) WHERE m.owned=TRUE RETURN p"
                }
            ]
        },
        {
            "category": "Local Admin",
            "name": "Find groups that have local admin rights (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p"
                }
            ]
        },
        {
            "category": "Local Admin",
            "name": "Find all users that have local admin rights",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p"
                }
            ]
        },
        {
            "category": "Local Admin",
            "name": "All Computers Local Admin to Another Computer",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (c1:Computer)-[r1:AdminTo]->(c2:Computer) RETURN p UNION ALL MATCH p = (c3:Computer)-[r2:MemberOf|HasSIDHistory*1..]->(g:Group)-[r3:AdminTo]->(c4:Computer) RETURN p"
                }
            ]
        },
        {
            "category": "Kerberos",
            "name": "Find all Kerberoastable Users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
                    "allowCollapse": false
                }
            ]
        },
        {
            "category": "Kerberos",
            "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset "
                }
            ]
        },
        {
            "category": "Kerberos",
            "name": "Find Kerberoastable Users with a path to DA",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p"
                }
            ]
        },
        {
            "category": "Kerberos",
            "name": "Find users that can be AS-REP roasted",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u"
                }
            ]
        },
        {
            "category": "Kerberos",
            "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
                }
            ]
        },
        {
            "category": "Kerberos",
            "name": "Find Kerberoastable users and where they are AdminTo",
            "queryList": [
                {
                    "final": true,
                    "query": "OPTIONAL MATCH (u:User) WHERE u.hasspn=true OPTIONAL MATCH (u)-[r:AdminTo]->(c:Computer) RETURN u"
                }
            ]
        },
        {
            "category": "(Un)constrained Delegation",
            "name": "Find all computers with Unconstrained Delegation",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c"
                }
            ]
        },
        {
            "category": "(Un)constrained Delegation",
            "name": "Find constrained delegation",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p"
                }
            ]
        },
        {
            "category": "(Un)constrained Delegation",
            "name": "Find computers that allow unconstrained delegation that AREN’T domain controllers.",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2"
                }
            ]
        },
        {
            "category": "(Un)constrained Delegation",
            "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c"
                }
            ]
        },
        {
            "category": "(Un)constrained Delegation",
            "name": "All Unconstrained Delegation Principals (excluding Domain Controllers and Administrators)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (dca)-[r:MemberOf*0..]->(g:Group) WHERE g.objectid =~ $domain_controllers_id OR g.objectid =~ $administrators_id WITH COLLECT(dca) AS exclude MATCH p = (d:Domain)-[r:Contains*1..]->(uc) WHERE (uc:User OR uc:Computer) AND uc.unconstraineddelegation = true AND NOT uc IN exclude RETURN p",
                    "props": {
                        "domain_controllers_id": "S-1-5-.*-516",
                        "administrators_id": ".*-S-1-5-32-544"
                    }
                }
            ]
        },
        {
            "category": "(Un)constrained Delegation",
            "name": "All Constrained Delegations",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (a)-[:AllowedToDelegate]->(c:Computer) RETURN p"
                }
            ]
        },
        {
            "category": "(Un)constrained Delegation",
            "name": "All Computers Allowed to Delegate for Another Computer",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (c1:Computer)-[:AllowedToDelegate]->(c2:Computer) RETURN p"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "List all High Valued Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "List all High Value Targets with Domain/Tenant",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (h {highvalue: True}) OPTIONAL MATCH p=(d)--(h) WHERE d:Domain OR d:AZTenant OR ((d:Group OR d:AZGroup) AND d.highvalue) RETURN p, h"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Show all high value target's groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m) WHERE (m:Group OR m:AZGroup) AND m.highvalue RETURN p"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Find Kerberoastable users who are members of high value groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Set DCSync Principals as High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (s)-[r:MemberOf|GetChanges*1..]->(d:Domain) WITH s, d MATCH (s)-[r:MemberOf|GetChangesAll*1..]->(d) WITH s, d MATCH p = (s)-[r:MemberOf|GetChanges|GetChangesAll*1..]->(d) SET s.highvalue = true, s.highvaluereason = 'DCSync Principal' RETURN p"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Set Unconstrained Delegation Principals as High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(uc) WHERE (uc:User OR uc:Computer) AND uc.unconstraineddelegation = true SET uc.highvalue = true, uc.highvaluereason = 'Unconstrained Delegation Principal' RETURN p"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Set Local Admin or Reset Password Principals as High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (a)-[r:AdminTo|ForceChangePassword]->(b) SET a.highvalue = true, a.highvaluereason = 'Local Admin or Reset Password Principal' RETURN a"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Set Principals with Privileges on Computers as High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (a)-[r:AllowedToDelegate|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner]->(n:Computer) SET a.highvalue = true, a.highvaluereason = 'Principal with Privileges on Computers' RETURN a"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Set Members of High Value Targets Groups as High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (a)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue = true SET a.highvalue=true, a.highvaluereason='Member of High Value Target Group' RETURN a"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Set members with Azure's Gobal Administrator role as High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (a)-[r:AZGlobalAdmin*1..]->(m) SET a.highvalue=true, a.highvaluereason='Has Azure\\' Global Administrator role' RETURN a"
                }
            ]
        },
        {
            "category": "High Value",
            "name": "Remove Inactive Users and Computers from High Value Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (uc) WHERE uc.highvalue = true AND ((uc:User AND uc.enabled = false) OR (uc:Computer AND ((uc.enabled = false) OR (uc.lastlogon > 0 AND uc.lastlogon < (TIMESTAMP() / 1000 - 15552000)) OR (uc.lastlogontimestamp > 0 AND uc.lastlogontimestamp < (TIMESTAMP() / 1000 - 15552000))))) SET uc.highvalue = false, uc.nothighvaluereason = 'Inactive' RETURN uc"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "List Azure Users (Limit: 100)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZUser) RETURN m LIMIT 100"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "List Azure Groups (Limit: 100)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZGroup) RETURN m LIMIT 100"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "List Azure Devices (Limit: 100)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZDevice) RETURN m LIMIT 100"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "List Azure VMs (Limit: 100)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZVM) RETURN m LIMIT 100"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "List Azure Key Vaults (Limit: 100)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZKeyVault) RETURN m LIMIT 100"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "List Azure Resource Groups (Limit: 100)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZResourceGroup) RETURN m LIMIT 100"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "List Azure Service Principals (Limit: 100)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZServicePrincipal) RETURN m LIMIT 100"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN n, p"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Return Azure Devices with the most edges",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZDevice)--() WITH m, COUNT(*) AS num ORDER BY num DESC RETURN m LIMIT 25"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Return Azure Users with the most edges",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:AZUser)--() WITH m, COUNT(*) AS num ORDER BY num DESC RETURN m LIMIT 25"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Return all owned azure objects",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m)-[r]-() WHERE r.isazure AND m.owned RETURN m"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Return All On-Prem users with edges to Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Find all paths to an Azure VM",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Find all paths to an Azure KeyVault",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Return All Azure Users and their Groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:AZUser)-[r:MemberOf]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Find all Privileged Service Principals",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Find all Owners of Azure Applications",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p"
                }
            ]
        },
        {
            "category": "Azure",
            "name": "Find all Owners of Azure VMs",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (n)-[r:AZOwns]->(g:AZVMs) RETURN p"
                }
            ]
        },
        {
            "category": "AWS",
            "name": "Find all GROUPS that contain 'AWS' or 'AMAZON' in their names",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n) WHERE (n:Group OR n:AZGroup) AND (n.name =~ '(?i).*(aws|amazon).*' OR n.azname =~ '(?i).*(aws|amazon).*') RETURN n"
                }
            ]
        },
        {
            "category": "AWS",
            "name": "Find all USERS that are members of groups containing 'AWS' or 'AMAZON' in their names",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m)-[MemberOf*1..]->(n) WHERE (m:User OR m:AZUser) AND (n:Group OR n:AZGroup) AND (n.name =~ '(?i).*(aws|amazon).*' OR n.azname =~ '(?i).*(aws|amazon).*') RETURN p"
                }
            ]
        },
        {
            "category": "VPN",
            "name": "Find all GROUPS that contain 'VPN' in their names",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n) WHERE (n:Group OR n:AZGroup) AND (n.name =~ '(?i).*vpn.*' OR n.azname =~ '(?i).*vpn.*') RETURN n"
                }
            ]
        },
        {
            "category": "VPN",
            "name": "Find all GROUPS that are members of groups containing 'VPN' in their names",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m)-[MemberOf*1..]-(n) WHERE (m:Group OR m:AZGroup) AND (n:Group OR n:AZGroup) AND (n.name =~ '(?i).*vpn.*' OR n.azname =~ '(?i).*vpn.*') RETURN p"
                }
            ]
        },
        {
            "category": "VPN",
            "name": "Find all USERS that are members of groups containing 'VPN' in their names",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m)-[MemberOf]->(n) WHERE (m:User OR m:AZUser) AND (n:Group OR n:AZGroup) AND (n.name =~ '(?i).*vpn.*' OR n.azname =~ '(?i).*vpn.*') RETURN p"
                }
            ]
        }
    ]
}